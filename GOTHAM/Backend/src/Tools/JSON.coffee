# JSON.prune : a function to stringify any object without overflow
# two additional optional parameters :
#   - the maximal depth (default : 6)
#   - the maximal length of arrays (default : 50)
# You can also pass an "options" object.
# examples :
#   var json = JSON.prune(window)
#   var arr = Array.apply(0,Array(1000)); var json = JSON.prune(arr, 4, 20)
#   var json = JSON.prune(window.location, {inheritedProperties:true})
# Web site : http://dystroy.org/JSON.prune/
# JSON.prune on github : https://github.com/Canop/JSON.prune
# This was discussed here : http://stackoverflow.com/q/13861254/263525
# The code is based on Douglas Crockford's code : https://github.com/douglascrockford/JSON-js/blob/master/json2.js
# No effort was done to support old browsers. JSON.prune will fail on IE8.
do ->

  quote = (string) ->
    escapable.lastIndex = 0
    if escapable.test(string) then '"' + string.replace(escapable, ((a) ->
      c = meta[a]
      if typeof c == 'string' then c else '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)
    )) + '"' else '"' + string + '"'

  str = (key, holder, depthDecr, arrayMaxLength) ->
    i = undefined
    k = undefined
    v = undefined
    length = undefined
    partial = undefined
    value = holder[key]
    if value and typeof value == 'object' and typeof value.toPrunedJSON == 'function'
      value = value.toPrunedJSON(key)
    switch typeof value
      when 'string'
        return quote(value)
      when 'number'
        return if isFinite(value) then String(value) else 'null'
      when 'boolean', 'null'
        return String(value)
      when 'object'
        if !value
          return 'null'
        if depthDecr <= 0 or seen.indexOf(value) != -1
          return '"-pruned-"'
        seen.push value
        partial = []
        if Object::toString.apply(value) == '[object Array]'
          length = Math.min(value.length, arrayMaxLength)
          i = 0
          while i < length
            partial[i] = str(i, value, depthDecr - 1, arrayMaxLength) or 'null'
            i += 1
          return '[' + partial.join(',') + ']'
        iterator value, (k) ->
          try
            v = str(k, value, depthDecr - 1, arrayMaxLength)
            if v
              partial.push quote(k) + ':' + v
          catch e
# this try/catch due to forbidden accessors on some objects
          return
        return '{' + partial.join(',') + '}'
    return

  'use strict'
  DEFAULT_MAX_DEPTH = 6
  DEFAULT_ARRAY_MAX_LENGTH = 50
  seen = undefined
  # Same variable used for all stringifications
  iterator = undefined
  # either forEachEnumerableOwnProperty, forEachEnumerableProperty or forEachProperty
  # iterates on enumerable own properties (default behavior)

  forEachEnumerableOwnProperty = (obj, callback) ->
    for k of obj
      if Object::hasOwnProperty.call(obj, k)
        callback k
    return

  # iterates on enumerable properties

  forEachEnumerableProperty = (obj, callback) ->
    for k of obj
      callback k
    return

  # iterates on properties, even non enumerable and inherited ones
  # This is dangerous

  forEachProperty = (obj, callback, excluded) ->
    if obj == null
      return
    excluded = excluded or {}
    Object.getOwnPropertyNames(obj).forEach (k) ->
      if !excluded[k]
        callback k
        excluded[k] = true
      return
    forEachProperty Object.getPrototypeOf(obj), callback, excluded
    return

  Date::toPrunedJSON = Date::toJSON
  String::toPrunedJSON = String::toJSON
  cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g
  escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g
  meta =
    '\\u8': '\\b'
    '\\u9': '\\t'
    '\\n': '\\n'
    '\\uc': '\\f'
    '\\ud': '\\r'
    '"': '\"'
    '\\': '\\\\'

  JSON.prune = (value, depthDecr, arrayMaxLength) ->
    if typeof depthDecr == 'object'
      options = depthDecr
      depthDecr = options.depthDecr
      arrayMaxLength = options.arrayMaxLength
      iterator = options.iterator or forEachEnumerableOwnProperty
      if options.allProperties
        iterator = forEachProperty
      else if options.inheritedProperties
        iterator = forEachEnumerableProperty
    else
      iterator = forEachEnumerableOwnProperty
    seen = []
    depthDecr = depthDecr or DEFAULT_MAX_DEPTH
    arrayMaxLength = arrayMaxLength or DEFAULT_ARRAY_MAX_LENGTH
    str '', { '': value }, depthDecr, arrayMaxLength

  JSON.prune.log = ->
    console.log.apply console, Array::slice.call(arguments).map((v) ->
      JSON.parse JSON.prune(v)
    )
    return

  JSON.prune.forEachProperty = forEachProperty
  # you might want to also assign it to Object.forEachProperty
  return

# ---
# generated by js2coffee 2.0.3